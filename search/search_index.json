{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Arch Linux Complete Installation on Laptop V0.5(210402)","text":""},{"location":"#to-check-whether-the-existing-boot-is-uefi-or-bios","title":"To check whether the existing boot is UEFI or BIOS","text":"<pre><code>ls /sys/firmare/efi/efivars\n</code></pre> <p>If it shows without an error it's UEFI If directory does not exist, then it's BIOS </p>"},{"location":"#check-for-wireless-devices-on-laptop","title":"Check for wireless devices on laptop","text":"<p>This shows the list of active network connections</p> <pre><code>ip addr\n</code></pre> <p>Turn on wifi module</p> <pre><code>ip link set wlp2s0 up\n</code></pre> <p>Use CLI interface to connect to wifi</p> <pre><code>wifi-menu\n\nnetctl list\n\nnetctl start profile\n\nping 1.1.1.1\n</code></pre> <p><code>PARTITIONING IS VERY IMPORTANT, kindly BACKUP you drives before further processing</code></p>"},{"location":"#partition-the-harddiskssd","title":"Partition the HardDisk/SSD","text":"<p>Check existing status of the drive</p> <pre><code>fdisk -l\n\ncfdisk /dev/sda\n</code></pre> <p><code>USE GPT for UEFI</code> or <code>USE BIOS for MBR</code></p> <p>My lap has 232.9G of storage and 4G of RAM</p>"},{"location":"#creating-3-patitons-sda1-sda2-and-sda3","title":"Creating 3 patitons sda1, sda2 and sda3","text":"<p><code>CURRENT LAYOUT WITH SIZES</code></p> <ul> <li>/mnt/boot 512M - /dev/sda1 EFI </li> <li>swap 8G - /dev/sda2 SWAP</li> <li>/mnt {rest of storage} -  /dev/sda3 ROOT</li> </ul> <p>Using sda1 for boot (/dev/sda1 EFI)</p> <pre><code>mkfs.fat /dev/sda1\n</code></pre> <p>Using sda2 for Swap (/dev/sda2 SWAP)</p> <pre><code>mkswap /dev/sda2\nswapon /dev/sda2\nfree -m\n</code></pre> <p>Uing sda3 for the root partition /mnt {rest of storage}</p> <pre><code>mkfs.ext4 /dev/sda3\n</code></pre>"},{"location":"#after-the-partiton-we-need-to-mount-all-of-them","title":"After the partiton we need to mount all of them","text":"<pre><code>mount /dev/sda3 /mnt\ncd /mnt\nmkdir boot\nmount /dev/sda1 /mnt/boot\ncd /mnt\n</code></pre>"},{"location":"#installation","title":"INSTALLATION","text":"<p>Installs the base packages for the installation</p> <pre><code>pacstrap /mnt base base-devel linux linux-firmware\n</code></pre> <p>FSTAB is responsible for booting partition from the etc directory</p> <pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n</code></pre> <p>We now need to boot into Arch Vertual Env</p> <pre><code>arch-chroot /mnt\n</code></pre> <p>WPA-Supplicant is required to store Wirless Hash Passwords</p> <pre><code>pacman -S dialog wpa_supplicant\n</code></pre> <p>Set TimeZone    </p> <pre><code>ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime\nhwclock --systohc\n</code></pre> <p>Set Timezone(Alternative)</p> <pre><code>timedatectl set-timezone \"Asia/Kolkata\"\ntimedatectl status\n</code></pre> <p>Set Keyboard</p> <pre><code>nano /etc/locale.gen\n\n`Uncomment`en_US.UTF-8 UTF-8\nlocale-gen\n</code></pre> <p>Change hostname</p> <pre><code>nano /etc/hostname\narch\n</code></pre> <p>Edit hosts file(To identify your network and set loopback)</p> <pre><code>nano /etc/hosts\n\n127.0.0.1   localhost\n::1         localhost\n127.0.1.1   arch.localdomain arch\n</code></pre> <p>Initialize RamDisk</p> <pre><code>mkinitcpio -P linux\n</code></pre> <p>Change current password for root</p> <pre><code>passwd\n</code></pre> <p>To setup EFI Boot <code>Make sure to DISABLE Secure Boot while Enabling EFI on LAPTOP BIOS</code></p> <pre><code>pacman -S grub efibootmgr vi vim ntfs-3g xorg sddm xorg-xinit xterm\n\ngrub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot --recheck\ngrub-mkconfig -o /boot/grub/grub.cfg\n</code></pre> <p>To interact with the OS using Mouse and KeyBoard, we need a Window Manager(LXQT)</p> <pre><code>pacman -S i3-wm dmenu lxqt\n</code></pre> <p>For KDE use the line below</p> <pre><code>pacman -S plasma plasma-wayland-session\n</code></pre>"},{"location":"#reboot-to-complete-the-installation-make-sure-the-grub-shows-up","title":"REBOOT to complete the installation, make sure the grub shows up!","text":""},{"location":"#post-installation","title":"POST INSTALLATION","text":"<pre><code>sudo systemctl enable NetworkManager\nsudo systemctl start NetworkManager\n</code></pre> <p>Add a new user     useradd -m ram Add password for new user     passwd ram Add new user to the wheel and network groups     usermod --append --groups wheel ram     usermod --append --groups network ram Uncomment the wheel, for root level access for the new user     visudo     %wheel ALL=(ALL)ALL</p>"},{"location":"#to-enable-wol-make-sure-you-enable-it-on-bios","title":"To enable WOL, make sure you enable it on BIOS","text":"<p>Kindly check, if your ethernet device supports WOL      ethtool interface | grep Wake-on Make sure to find the proper ethernet MAC address to make this work!     vim /usr/lib/systemd/network/99-default.link</p> <pre><code>[Match]\nMACAddress=aa:bb:cc:dd:ee:ff\n\n[Link]\nNamePolicy=kernel database onboard slot path\nMACAddressPolicy=persistent\nWakeOnLan=magic\n</code></pre>"},{"location":"#sambastill-buggy","title":"SAMBA(Still buggy)","text":"<p>To create a samba server all you need is to create a samba user and point to the directory to share! Instead of /opt use your own user directory</p> <pre><code>sudo pacman -S samba\n</code></pre> <p>Create a new samba user &amp; password for the same.     smbpasswd -a ram     smbpasswd ram To list all samba users      sudo pdbedit -L -v</p> <pre><code>sudo vim /etc/samba/smb.conf\n\n[global]\nlogging = systemd\n#workgroup = WORKGROUP\nclient min protocol = NT1\n#server min protocol = SMB2_02\n#server max protocol = SMB3\nmap to guest = bad password\nserver min protocol = NT1\n[share]\npath = /opt\nvalid users = ram\nguest ok = yes\nbrowseable = yes\npublic = yes\nwritable = yes\n</code></pre> <p>To check for errors, use this command to determine the cause of the issue!      testparm Start the below services to start Samba     sudo systemctl enable smbd      sudo systemctl enable nmb     sudo systemctl start smbd      sudo systemctl start nmb</p>"},{"location":"#to-use-aur-and-enable-teamviewer-on-systemd","title":"To use AUR and Enable Teamviewer on Systemd","text":"<pre><code>git clone https://aur.archlinux.org/anydesk-bin.git\ncd anydesk-bin\n\nsudo rm /var/lib/pacman/db.lck\n\nmakepkg -Acs\npacman -U anydesk-bin.pkg.tar.xz\n</code></pre>"},{"location":"#systemd","title":"SystemD","text":"<pre><code>sudo systemctl enable teamviewerd.service\nsudo systemctl start teamviewerd.service\n</code></pre> <p>Then start teamviewer</p>"},{"location":"#upcoming","title":"Upcoming","text":""},{"location":"#planned-to-create-an-automation-script-for-fast-arch-install-time-duration-often-depends-on-net-and-storage-speed","title":"<code>Planned to create an automation script for fast Arch Install (Time duration often depends on net and storage speed!)</code>","text":""},{"location":"Vim/","title":"Vim","text":"<p>This is fun! Shortcuts for all!!!</p>"},{"location":"about/","title":"About","text":"<p>Hi My name is Ram and I am creating and improvising new way to have a productive environment for linux and linux based Operation Systems. <code>Be tuned to my Git Post</code></p>"},{"location":"gentoo/","title":"Gentoo Linux Complete Installation on Intel CPU V0.54(Documented on: 210815)","text":"<p>When installing gentoo make sure you keep the BELOW URL PAGE OPEN on another device, as you might see an outdated installation method if you care to follow this tutorial by now! This installation is done with minimum effort for installing the base system, without tangling with extreme detailing.</p> <p>AMD64 HANDBOOK</p>"},{"location":"gentoo/#basics-before-you-continue-check-below","title":"Basics (Before you continue, Check Below)","text":"<ul> <li>Check the integrity of the iso file with sha512sum checksum if necessary</li> <li>Download the gentoo minimum iso from the download page</li> <li>Kindly have the fastest INTEL CPU &amp; Internet connection at home(For moderate compilation speeds, as gentoo is pure source based distribution)</li> <li>SSD or NVME please</li> <li>RAM above 8GB</li> <li>Some patience ;-)</li> </ul>"},{"location":"gentoo/#partition","title":"Partition","text":"<p>Let's use 128GB SSD for the installation, with 3 partitions sda1(F32)(boot),sda2(swap) and sda3(ext4)(root). Partition them to your liking but the above stays mandatory</p> <ul> <li>We should be using the uefi based GPT for boot partition</li> <li>But disable SECURE BOOT on BIOS as it may interfere with the installation</li> </ul>"},{"location":"gentoo/#check-internet-connection","title":"Check internet connection","text":"<pre><code>ping google.com\n</code></pre> <ul> <li>If this doesn't work, refer Handbook!</li> </ul>"},{"location":"gentoo/#partition-the-ssd","title":"Partition the SSD","text":"<p>Check existing status of the drive</p> <pre><code>fdisk -l\ncfdisk /dev/sda\n</code></pre> <ul> <li>USE GPT for UEFI</li> <li>My lap has 232.9G of storage and 8G of RAM</li> </ul>"},{"location":"gentoo/#creating-3-partitions-sda1-sda2-and-sda3","title":"Creating 3 partitions sda1, sda2 and sda3","text":"<p>*CURRENT LAYOUT WITH SIZES</p> <pre><code>/mnt/boot   512M            - /dev/sda1 EFI\nswap        8G                - /dev/sda2 SWAP\n/mnt        {rest of storage} -  /dev/sda3 ROOT\n</code></pre> <p>Using sda1 for boot (/dev/sda1 EFI)</p> <pre><code>mkfs.vfat -F 32 /dev/sda1\n</code></pre> <p>Using sda2 for Swap (/dev/sda2 SWAP)</p> <pre><code>swapon /dev/sda2\nmkswap /dev/sda2\nfree -m\n</code></pre> <p>Using sda3 for the root partition /mnt {rest of storage}</p> <pre><code>mkfs.ext4 /dev/sda3\n</code></pre>"},{"location":"gentoo/#after-the-partition-we-need-to-mount-all-of-them","title":"After the partition we need to mount all of them","text":"<pre><code>mount /dev/sda3 /mnt/gentoo\ncd /mnt/gentoo\nwget \"stage-3_tarball.iso\" from gentoo download page\ntar xpvf stage3-*.tar.xz --xattrs-include='*.*' --numeric-owner\n</code></pre>"},{"location":"gentoo/#setup-cflags-and-cxxflags","title":"Setup CFLAGS and CXXFLAGS","text":"<pre><code>nano -w /mnt/gentoo/etc/portage/make.conf\n</code></pre> <p>This is only for the Haswell architecture, kindly refer to Handbook for your specific flag setup!</p> <pre><code> # These settings were set by the catalyst build script that automatically\n # built this stage.\n # Please consult /usr/share/portage/config/make.conf.example for a more\n # detailed example.\n COMMON_FLAGS=\"-march=native -O2 -pipe\"\n CFLAGS=\"${COMMON_FLAGS}\"\n CXXFLAGS=\"${COMMON_FLAGS}\"\n FCFLAGS=\"${COMMON_FLAGS}\"\n FFLAGS=\"${COMMON_FLAGS}\"\n MAKEOPTS=\"-j4\"\n # NOTE: This stage was built with the bindist Use flag enabled\n PORTDIR=\"/var/db/repos/gentoo\"\n DISTDIR=\"/var/cache/distfiles\"\n PKGDIR=\"/var/cache/binpkgs\"\n #USE=\"-gtk -gnome qt4 qt5 kde dvd alsa cdr systemd udev activities declarative dri kde kwallet &gt; phonon plasma policykit qml semantic-desktop widgets\"\n # This sets the language of build output to English.\n # Please keep this setting intact when reporting bugs.\n LC_MESSAGES=C\n GRUB_PLATFORMS=\"efi-64\"\n USE=\"euse bluetooth\"\n #ACCEPT_KEYWORDS=\"~amd64\"\n</code></pre>"},{"location":"gentoo/#setup-fastest-mirror","title":"Setup fastest mirror","text":"<pre><code>mirrorselect -i -o &gt;&gt; /mnt/gentoo/etc/portage/make.conf\n</code></pre>"},{"location":"gentoo/#edit-portage-repository","title":"Edit portage repository","text":"<pre><code>nano /mnt/gentoo/etc/portage/repos.conf/gentoo.conf\n\n\n [DEFAULT]\n main-repo = gentoo\n\n [gentoo]\nlocation = /var/db/repos/gentoo\nsync-type = rsync\nsync-uri = rsync://rsync.gentoo.org/gentoo-portage\nauto-sync = yes\nsync-rsync-verify-jobs = 1\nsync-rsync-verify-metamanifest = yes\nsync-rsync-verify-max-age = 24\nsync-openpgp-key-path = /usr/share/openpgp-keys/gentoo-release.asc\nsync-openpgp-key-path = 40\nsync-openpgp-key-refresh-retry-overall-timeout = 1200\nsync-openpgp-key-refresh-retry-delay-exp-base = 2\nsync-openpgp-key-refresh-retry-delay-max = 60\nsync-openpgp-key-refresh-retry-delay-mult = 4\n</code></pre>"},{"location":"gentoo/#mounting","title":"Mounting","text":"<pre><code>mount --types proc /proc /mnt/gentoo/proc\nmount --rbind /sys /mnt/gentoo/sys\nmount --make-rslave /mnt/gentoo/sys\nmount --rbind /dev /mnt/gentoo/dev\nmount --make-rslave /mnt/gentoo/dev\n</code></pre>"},{"location":"gentoo/#entering-the-new-environment-chrooting","title":"Entering the new environment (Chrooting)","text":"<pre><code>chroot /mnt/gentoo /bin/bash\nsource /etc/profile\nexport PS1=\"(chroot) ${PS1}\"\n</code></pre>"},{"location":"gentoo/#mounting-the-boot-partition","title":"Mounting the boot partition","text":"<pre><code>mount /dev/sda1 /boot\n</code></pre>"},{"location":"gentoo/#configuring-portage","title":"Configuring Portage","text":"<pre><code>emerge-webrsync\n</code></pre>"},{"location":"gentoo/#choosing-the-right-profile","title":"Choosing the right profile","text":"<pre><code>eselect profile list\neselect profile set 9\n</code></pre> <ul> <li>We would like to install kde with systemd support</li> </ul>"},{"location":"gentoo/#updating-the-world-set","title":"Updating the @world set","text":"<pre><code>emerge --ask --verbose --update --deep --newuse @world\n</code></pre> <ul> <li>This will take time....</li> </ul> <p>Edit make.conf for further changes and run emerge!</p> <pre><code>nano -w /etc/portage/make.conf\nemerge -uavDN @world\nemerge -uUDav --exclude python:3.9 @world\n</code></pre> <ul> <li>If facing any issues with python, exclude the python version</li> </ul> <p>List all USE flags for further addition and subtraction of flags!</p> <pre><code>less /var/db/repos/gentoo/profiles/use.desc\n</code></pre> <p>NOTICE: Do not accept EULA!</p>"},{"location":"gentoo/#timezone","title":"TimeZone","text":"<pre><code>ls /usr/share/zoneinfo\nln -sf ../usr/share/zoneinfo/Asia/Kolkata /etc/localtime\n</code></pre> <p><code>etc-update &amp;&amp; emerge --sync &amp;&amp; etc-update --automode -3</code></p>"},{"location":"gentoo/#locale-generation","title":"Locale generation","text":"<pre><code>nano -w /etc/locale.gen\n</code></pre> <p>Uncomment <code>en_US.UTF-8 UTF-8</code></p> <pre><code>locale-gen\n</code></pre> <p><code>. /etc/profile</code></p>"},{"location":"gentoo/#locale-selection","title":"Locale selection","text":"<pre><code>eselect locale list\neselect locale set 5\n</code></pre> <ul> <li>Set to \"en_US.utf8\"</li> </ul> <p>Reload the environment:</p> <pre><code>env-update &amp;&amp; source /etc/profile &amp;&amp; export PS1=\"(chroot) ${PS1}\"\n</code></pre>"},{"location":"gentoo/#installation","title":"**Installation      **","text":"<p>Kernel Source:</p> <pre><code>emerge --ask sys-kernel/gentoo-sources\n</code></pre> <p>Building and Installing an initramfs:</p> <pre><code>emerge --ask sys-kernel/genkernel\n</code></pre> <p>Some drivers require additional firmware:</p> <pre><code>emerge --ask sys-kernel/linux-firmware\n</code></pre> <p><code>echo \"sys-kernel/linux-firmware @BINARY-REDISTRIBUTABLE\" | tee -a /etc/portage/package.license</code></p> <pre><code>nano -w /etc/fstab\n\n`genkernel all`\n</code></pre>"},{"location":"gentoo/#partition-labels-uuids","title":"Partition labels &amp; UUIDs","text":"<pre><code>blkid\nnano -w /etc/fstab\nemerge --ask vim\nemerge --ask wpa_supplicant\nwpa_cli\nsystemctl status sshd\nsystemctl enable sshd\nsystemctl start sshd\nfdisk -l\nvim /etc/fstab\n</code></pre>"},{"location":"gentoo/#host-and-domain-information","title":"Host and domain information","text":"<pre><code>nano -w /etc/conf.d/hostname\nhostname=\"tux\"\nnano -w /etc/conf.d/net\ndns_domain_lo=\"homenetwork\"\n</code></pre> <p>All networking information is gathered in /etc/conf.d/net</p> <pre><code>emerge --ask --noreplace net-misc/netifrc\nnano -w /etc/conf.d/net\n</code></pre> <p><code>For Manual ip assign</code></p> <pre><code>config_eth0=\"192.168.0.2 netmask 255.255.255.0 brd 192.168.0.255\"\nroutes_eth0=\"default via 192.168.0.1\"\n</code></pre> <p><code>For DHCP</code></p> <pre><code>config_eth0=\"dhcp\"\n</code></pre>"},{"location":"gentoo/#host-fileexample","title":"Host File(example):","text":"<pre><code>nano -w /etc/hosts\n</code></pre> <p>Change the name and ip accordingly!</p> <pre><code># This defines the current system and must be set\n127.0.0.1     tux.homenetwork tux localhost\n# Optional definition of extra systems on the network\n192.168.0.5   jenny.homenetwork jenny\n192.168.0.6   benny.homenetwork benny\n</code></pre>"},{"location":"gentoo/#change-current-password-for-root","title":"Change current password for root","text":"<pre><code>passwd\n</code></pre>"},{"location":"gentoo/#install-the-system-logger-dhcp-wireless-networking-tools-file-indexing","title":"Install the system logger, DHCP, wireless networking tools &amp; File indexing","text":"<pre><code>emerge --ask app-admin/sysklogd\nemerge --ask sys-apps/mlocate\nemerge --ask net-misc/dhcpcd\nemerge --ask net-wireless/iw net-wireless/wpa_supplicant\n</code></pre>"},{"location":"gentoo/#grub2-config","title":"GRUB2 config","text":"<pre><code>echo 'GRUB_PLATFORMS=\"efi-64\"' &gt;&gt; /etc/portage/make.conf\nemerge --ask --verbose sys-boot/grub:2\ngrub-install --target=x86_64-efi --efi-directory=/boot\n</code></pre>"},{"location":"gentoo/#generate-the-final-grub2-configuration","title":"Generate the final GRUB2 configuration","text":"<pre><code>grub-mkconfig -o /boot/grub/grub.cfg\n</code></pre>"},{"location":"gentoo/#post-installation","title":"POST INSTALLATION","text":"<pre><code>ip addr\nwpa_cli -i wlp0s20u9\ndhcpcd\nping google.com\nvim /etc/resolv.conf\nvim /etc/systemd/network/50-dhcp.network\nvim /etc/resolv.conf\nsystemctl enable systemd-resolved.service\nsystemctl start systemd-resolved.service\nnmtui\nvim /etc/resolv.conf\nsystemctl start dhcpcd\nsystemctl enable dhcpcd\nvim /etc/dispatch-conf.conf\nemerge --ask app-misc/colordiff\nvim  /etc/dispatch-conf.conf\neselect editor list\nemerge --ask dispatch-conf\nemerge --ask app-portage/dispatch\nemerge --ask rcs\nvim /etc/dispatch-conf.conf\nemerge --verbose --info | egrep '^USE'\nportageq envvar EDITOR\nemerge --ask git\nemerge --ask dev-vcs/git\nemerge --ask kde-plasma/plasma-meta\nstartx\nsystemctl enable sddm\nsystemctl start sddm\nemerge --ask sudo\nsudo\nvisudo\nuseradd -m -G users,wheel,audio -s /bin/bash ram\npasswd ram\n</code></pre> <p>Add a new user</p> <pre><code>useradd -m ram\n</code></pre> <p>Add password for new user</p> <pre><code>passwd ram\n</code></pre> <p>Add new user to the wheel and network groups</p> <pre><code>usermod --append --groups wheel ram\nusermod --append --groups network ram\n</code></pre> <p>Uncomment the wheel, for root level access for the new user</p> <pre><code>visudo\n%wheel ALL=(ALL)ALL\n</code></pre>"},{"location":"gentoo/#to-enable-wol-make-sure-you-enable-it-on-bios","title":"To enable WOL, make sure you enable it on BIOS","text":"<p>Kindly check, if your Ethernet device supports WOL      ethtool interface | grep Wake-on Make sure to find the proper Ethernet MAC address to make this work!     vim /usr/lib/systemd/network/99-default.link</p> <pre><code>[Match]\nMACAddress=aa:bb:cc:dd:ee:ff\n\n[Link]\nNamePolicy=kernel database onboard slot path\nMACAddressPolicy=persistent\nWakeOnLan=magic\n</code></pre>"},{"location":"gentoo/#sambamight-be-buggy","title":"Samba(Might Be Buggy)","text":"<p>To create a samba server all you need is to create a samba user and point to the directory to share!    Instead of /opt use your own user directory</p> <pre><code>sudo emerge --ask samba\n</code></pre> <p>Create a new samba user &amp; password for the same.</p> <pre><code>smbpasswd -a ram\nsmbpasswd ram\n</code></pre> <p>To list all samba users</p> <pre><code>sudo pdbedit -L -v\n\nsudo vim /etc/samba/smb.conf\n\n[global]\nlogging = systemd\n#workgroup = WORKGROUP\nclient min protocol = NT1\n#server min protocol = SMB2_02\n#server max protocol = SMB3\nmap to guest = bad password\nserver min protocol = NT1\n[share]\npath = /opt\nvalid users = ram\nguest ok = yes\nbrowseable = yes\npublic = yes\nwritable = yes\n</code></pre> <p>To check for errors, use this command to determine the cause of the issue!</p> <pre><code>testparm\n</code></pre> <p>Start the below services to start Samba</p> <pre><code>sudo systemctl enable smbd\nsudo systemctl enable nmb\nsudo systemctl start smbd \nsudo systemctl start nmb\n</code></pre>"}]}